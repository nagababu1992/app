name: backend_pipeline
run-name: Backend deployment by ${{ github.actor }}

on:
    push:
        branches:
            - dev
            - main
        paths:
            - 'apps/backend/**'
            - 'libs/shared/**'

jobs:
    # Job to build the backend
    build:
        name: Build Backend
        runs-on: ubuntu-latest
        steps:
            # 1. Checkout the repository
            - name: Checkout Code
              uses: actions/checkout@v4

            # 2. Set up Node.js
            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20 # Use the correct version

            # 3. Install dependencies
            - name: Install Dependencies
              run: npm install

            # 4. Install NX CLI globally
            - name: Install NX CLI
              run: npm install -g nx

            # 5. Build the backend project
            - name: Build Backend
              run: npm run build:backend

            # 8. Upload build artifacts for use in the deploy job
            - name: Upload Backend Build Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: backend-build
                  path: dist/apps/backend # Replace with your backend output directory

    # Job to deploy the backend
    deploy:
        name: Deploy to EC2
        runs-on: ubuntu-latest
        needs: build

        steps:
            # 1. Set environment variables based on branch
            - name: Set Deployment Environment
              run: |
                  case $GITHUB_REF in
                    refs/heads/dev)
                      echo "APP_ENV='DEV'" >> $GITHUB_ENV
                      echo "EC2_HOST=${{ secrets.DEV_EC2_HOST }}" >> $GITHUB_ENV
                      echo "EC2_USER=${{ secrets.DEV_EC2_USER }}" >> $GITHUB_ENV
                      echo "SERVER_SECRET=${{ secrets.DEV_SERVER_SECRET }}" >> $GITHUB_ENV
                      echo "ENCRYPTION_KEY=${{ secrets.DEV_ENCRYPTION_KEY }}" >> $GITHUB_ENV
                      echo "MONGO_CONNECTION_URI=${{ secrets.DEV_MONGO_CONNECTION_URI }}" >> $GITHUB_ENV
                      echo "MONGO_DB_NAME=${{ secrets.DEV_MONGO_DB_NAME }}" >> $GITHUB_ENV
                      echo "STRIPE_PUBLIC_KEY=${{ secrets.DEV_STRIPE_PUBLIC_KEY }}" >> $GITHUB_ENV
                      echo "STRIPE_WEBHOOK_KEY=${{ secrets.DEV_STRIPE_WEBHOOK_KEY }}" >> $GITHUB_ENV
                      echo "STRIPE_SECRET_KEY=${{ secrets.DEV_STRIPE_SECRET_KEY }}" >> $GITHUB_ENV
                      echo "NETNUT_AGENT=${{ secrets.DEV_NETNUT_AGENT }}" >> $GITHUB_ENV
                      echo "NETNUT_USERNAME=${{ secrets.DEV_NETNUT_USERNAME }}" >> $GITHUB_ENV
                      echo "NETNUT_PASSWORD=${{ secrets.DEV_NETNUT_PASSWORD }}" >> $GITHUB_ENV
                      echo "NETNUT_PROXY_SERVER=${{ secrets.DEV_NETNUT_PROXY_SERVER }}" >> $GITHUB_ENV
                      echo "UNIPILE_BASE_URL=${{ secrets.DEV_UNIPILE_BASE_URL }}" >> $GITHUB_ENV
                      echo "UNIPILE_ACCESS_TOKEN=${{ secrets.DEV_UNIPILE_ACCESS_TOKEN }}" >> $GITHUB_ENV
                      echo "REDIS_HOST=${{ secrets.DEV_REDIS_HOST }}" >> $GITHUB_ENV
                      echo "REDIS_PORT=${{ secrets.DEV_REDIS_PORT }}" >> $GITHUB_ENV
                      echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_ENV
                      echo "${{ secrets.DEV_EC2_SSH_KEY }}" >> $GITHUB_ENV
                      echo "EOF" >> $GITHUB_ENV
                      ;;
                    refs/heads/main)
                      echo "APP_ENV='PROD'" >> $GITHUB_ENV
                      echo "EC2_HOST=${{ secrets.PROD_EC2_HOST }}" >> $GITHUB_ENV
                      echo "EC2_USER=${{ secrets.PROD_EC2_USER }}" >> $GITHUB_ENV
                      echo "SERVER_SECRET=${{ secrets.PROD_SERVER_SECRET }}" >> $GITHUB_ENV
                      echo "ENCRYPTION_KEY=${{ secrets.PROD_ENCRYPTION_KEY }}" >> $GITHUB_ENV
                      echo "MONGO_CONNECTION_URI=${{ secrets.PROD_MONGO_CONNECTION_URI }}" >> $GITHUB_ENV
                      echo "MONGO_DB_NAME=${{ secrets.PROD_MONGO_DB_NAME }}" >> $GITHUB_ENV
                      echo "STRIPE_PUBLIC_KEY=${{ secrets.PROD_STRIPE_PUBLIC_KEY }}" >> $GITHUB_ENV
                      echo "STRIPE_WEBHOOK_KEY=${{ secrets.PROD_STRIPE_WEBHOOK_KEY }}" >> $GITHUB_ENV
                      echo "STRIPE_SECRET_KEY=${{ secrets.PROD_STRIPE_SECRET_KEY }}" >> $GITHUB_ENV
                      echo "NETNUT_AGENT=${{ secrets.PROD_NETNUT_AGENT }}" >> $GITHUB_ENV
                      echo "NETNUT_USERNAME=${{ secrets.PROD_NETNUT_USERNAME }}" >> $GITHUB_ENV
                      echo "NETNUT_PASSWORD=${{ secrets.PROD_NETNUT_PASSWORD }}" >> $GITHUB_ENV
                      echo "NETNUT_PROXY_SERVER=${{ secrets.PROD_NETNUT_PROXY_SERVER }}" >> $GITHUB_ENV
                      echo "UNIPILE_BASE_URL=${{ secrets.PROD_UNIPILE_BASE_URL }}" >> $GITHUB_ENV
                      echo "UNIPILE_ACCESS_TOKEN=${{ secrets.PROD_UNIPILE_ACCESS_TOKEN }}" >> $GITHUB_ENV
                      echo "REDIS_HOST=${{ secrets.PROD_REDIS_HOST }}" >> $GITHUB_ENV
                      echo "REDIS_PORT=${{ secrets.PROD_REDIS_PORT }}" >> $GITHUB_ENV
                      echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_ENV
                      echo "${{ secrets.PROD_EC2_SSH_KEY }}" >> $GITHUB_ENV
                      echo "EOF" >> $GITHUB_ENV
                      ;;
                  esac

            # 2. Download the backend build artifact
            - name: Download Backend Build Artifact
              uses: actions/download-artifact@v4
              with:
                  name: backend-build

            # 3. Set up SSH agent with the private key
            - name: Set up SSH agent with private key
              run: |
                  mkdir -p ~/.ssh
                  echo "${{ env.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa
                  eval $(ssh-agent -s)
                  ssh-add ~/.ssh/id_rsa
                  ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

                  # Debugging: Check the content of the known_hosts file and SSH keys
                  cat ~/.ssh/known_hosts
                  cat ~/.ssh/id_rsa

                  # Debugging: Try to SSH into the EC2 instance to see if it connects
                  ssh -v -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} 'echo "SSH connection successful!"'

            # 4. Clean up existing backend directory on EC2
            - name: Clean up existing backend directory on EC2
              run: |
                  ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
                  rm -rf /home/${{ env.EC2_USER }}/backend/*
                  EOF

            # 5. Terminate all running backend-app processes in EC2
            - name: Terminate all running backend-apps on EC2
              run: |
                  ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
                  # Stop and delete any running backend-apps
                  pm2 delete backend-app || true
                  EOF

            # 6. Create ecosystem.config.js file dynamically
            - name: Create ecosystem.config.js
              run: |
                  echo "module.exports = {
                    apps: [
                      {
                        name: 'backend-app',
                        script: '/home/${{ env.EC2_USER }}/backend/main.js',
                        env: {
                          PORT_BACKEND: '80',
                          PORT_FRONTEND: '80',
                          APP_ENV: ${{ env.APP_ENV }},
                          SMTP_HOST: \"${{ secrets.SMTP_HOST }}\",
                          SMTP_PORT: \"${{ secrets.SMTP_PORT }}\",
                          SMTP_USER: \"${{ secrets.SMTP_USER }}\",
                          SMTP_PASSWORD: \"${{ secrets.SMTP_PASSWORD }}\",
                          MONGO_CONNECTION_URI: \"${{ env.MONGO_CONNECTION_URI }}\",
                          MONGO_DB_NAME: \"${{ env.MONGO_DB_NAME }}\",
                          STRIPE_PUBLIC_KEY: \"${{ env.STRIPE_PUBLIC_KEY }}\",
                          STRIPE_WEBHOOK_KEY: \"${{ env.STRIPE_WEBHOOK_KEY }}\",
                          STRIPE_SECRET_KEY: \"${{ env.STRIPE_SECRET_KEY }}\",
                          NETNUT_AGENT: \"${{ env.NETNUT_AGENT }}\",
                          NETNUT_USERNAME: \"${{ env.NETNUT_USERNAME }}\",
                          NETNUT_PASSWORD: \"${{ env.NETNUT_PASSWORD }}\",
                          NETNUT_PROXY_SERVER: \"${{ env.NETNUT_PROXY_SERVER }}\",
                          SERVER_SECRET: \"${{ env.SERVER_SECRET }}\",
                          ENCRYPTION_KEY: \"${{ env.ENCRYPTION_KEY }}\",
                          REDIS_HOST: \"${{ env.REDIS_HOST }}\",
                          REDIS_PORT: \"${{ env.REDIS_PORT }}\",
                          UNIPILE_BASE_URL: \"${{ env.UNIPILE_BASE_URL }}\",
                          UNIPILE_ACCESS_TOKEN: \"${{ env.UNIPILE_ACCESS_TOKEN }}\"
                        },
                        env_production: {
                          PORT_BACKEND: '80',
                          PORT_FRONTEND: '80',
                          APP_ENV: ${{ env.APP_ENV }},
                          SMTP_HOST: \"${{ secrets.SMTP_HOST }}\",
                          SMTP_PORT: \"${{ secrets.SMTP_PORT }}\",
                          SMTP_USER: \"${{ secrets.SMTP_USER }}\",
                          SMTP_PASSWORD: \"${{ secrets.SMTP_PASSWORD }}\",
                          MONGO_CONNECTION_URI: \"${{ env.MONGO_CONNECTION_URI }}\",
                          MONGO_DB_NAME: \"${{ env.MONGO_DB_NAME }}\",
                          STRIPE_PUBLIC_KEY: \"${{ env.STRIPE_PUBLIC_KEY }}\",
                          STRIPE_WEBHOOK_KEY: \"${{ env.STRIPE_WEBHOOK_KEY }}\",
                          STRIPE_SECRET_KEY: \"${{ env.STRIPE_SECRET_KEY }}\",
                          NETNUT_AGENT: \"${{ env.NETNUT_AGENT }}\",
                          NETNUT_USERNAME: \"${{ env.NETNUT_USERNAME }}\",
                          NETNUT_PASSWORD: \"${{ env.NETNUT_PASSWORD }}\",
                          NETNUT_PROXY_SERVER: \"${{ env.NETNUT_PROXY_SERVER }}\",
                          SERVER_SECRET: \"${{ env.SERVER_SECRET }}\",
                          ENCRYPTION_KEY: \"${{ env.ENCRYPTION_KEY }}\",
                          REDIS_HOST: \"${{ env.REDIS_HOST }}\",
                          REDIS_PORT: \"${{ env.REDIS_PORT }}\",
                          UNIPILE_BASE_URL: \"${{ env.UNIPILE_BASE_URL }}\",
                          UNIPILE_ACCESS_TOKEN: \"${{ env.UNIPILE_ACCESS_TOKEN }}\"
                        }
                      }
                    ]
                  }" > ecosystem.config.js
                  cat ecosystem.config.js  # Optional: Print the file contents for debugging

            # 7. Upload the cleaned backend build to EC2
            - name: Upload Build to EC2
              run: |
                  scp -o StrictHostKeyChecking=no -r /home/runner/work/application/application/* ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/home/${{ env.EC2_USER }}/backend/

            # 8. Restart the application on EC2 using PM2 with the dynamically created ecosystem file
            - name: Restart Backend Service with PM2
              run: |
                  ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'

                    # Update the system
                    sudo dnf update -y

                    # Enable CodeReady Builder (CRB) repository for additional packages
                    sudo dnf config-manager --set-enabled crb

                    # Install Puppeteer dependencies
                    sudo dnf install -y atk at-spi2-atk cups-libs libdrm libgbm libXdamage libxkbcommon gtk3 nss alsa-lib liberation-fonts

                      # Install Node.js and PM2 if not available
                      if ! command -v node &> /dev/null; then
                          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
                          source ~/.nvm/nvm.sh
                          nvm install 20
                      fi
                      if ! command -v pm2 &> /dev/null; then
                          npm install -g pm2
                      fi

                      # Grant Node.js permission to bind to low ports (e.g., port 80)
                      sudo dnf install -y libcap
                      sudo setcap 'cap_net_bind_service=+ep' $(which node)

                      cd /home/${{ env.EC2_USER }}/backend
                      npm install --production
                      # Start the backend app with PM2 using the ecosystem file
                      pm2 start ecosystem.config.js --env production --no-color
                  EOF
